/*
* generated by Xtext
*/

package dk.sdu.mmmi.embedix.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ULSWIGGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class LinkSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LinkSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLinkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cPackagenameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cPackagenameIDTerminalRuleCall_1_0_0 = (RuleCall)cPackagenameAssignment_1_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConstructorsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConstructorsConstructorParserRuleCall_4_0 = (RuleCall)cConstructorsAssignment_4.eContents().get(0);
		
		//LinkSpec:
		//	"link" (packagename=ID ".")? name=ID ";" constructors+=Constructor*;
		public ParserRule getRule() { return rule; }

		//"link" (packagename=ID ".")? name=ID ";" constructors+=Constructor*
		public Group getGroup() { return cGroup; }

		//"link"
		public Keyword getLinkKeyword_0() { return cLinkKeyword_0; }

		//(packagename=ID ".")?
		public Group getGroup_1() { return cGroup_1; }

		//packagename=ID
		public Assignment getPackagenameAssignment_1_0() { return cPackagenameAssignment_1_0; }

		//ID
		public RuleCall getPackagenameIDTerminalRuleCall_1_0_0() { return cPackagenameIDTerminalRuleCall_1_0_0; }

		//"."
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }

		//constructors+=Constructor*
		public Assignment getConstructorsAssignment_4() { return cConstructorsAssignment_4; }

		//Constructor
		public RuleCall getConstructorsConstructorParserRuleCall_4_0() { return cConstructorsConstructorParserRuleCall_4_0; }
	}

	public class ConstructorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constructor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsPublicAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsPublicPublicKeyword_0_0 = (Keyword)cIsPublicAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParametersIDTerminalRuleCall_3_0_0 = (RuleCall)cParametersAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParametersIDTerminalRuleCall_3_1_1_0 = (RuleCall)cParametersAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cAddressesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cAddressesConstructorAddressParametersParserRuleCall_5_1_0 = (RuleCall)cAddressesAssignment_5_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cMembersAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cMembersMemberParserRuleCall_7_0_0 = (RuleCall)cMembersAssignment_7_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Constructor:
		//	isPublic?="public"? name=ID "(" (parameters+=ID ("," parameters+=ID)*)? ")" (":"
		//	addresses=ConstructorAddressParameters)? "{" (members+=Member ";")* "}";
		public ParserRule getRule() { return rule; }

		//isPublic?="public"? name=ID "(" (parameters+=ID ("," parameters+=ID)*)? ")" (":"
		//addresses=ConstructorAddressParameters)? "{" (members+=Member ";")* "}"
		public Group getGroup() { return cGroup; }

		//isPublic?="public"?
		public Assignment getIsPublicAssignment_0() { return cIsPublicAssignment_0; }

		//"public"
		public Keyword getIsPublicPublicKeyword_0_0() { return cIsPublicPublicKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(parameters+=ID ("," parameters+=ID)*)?
		public Group getGroup_3() { return cGroup_3; }

		//parameters+=ID
		public Assignment getParametersAssignment_3_0() { return cParametersAssignment_3_0; }

		//ID
		public RuleCall getParametersIDTerminalRuleCall_3_0_0() { return cParametersIDTerminalRuleCall_3_0_0; }

		//("," parameters+=ID)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//parameters+=ID
		public Assignment getParametersAssignment_3_1_1() { return cParametersAssignment_3_1_1; }

		//ID
		public RuleCall getParametersIDTerminalRuleCall_3_1_1_0() { return cParametersIDTerminalRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//(":" addresses=ConstructorAddressParameters)?
		public Group getGroup_5() { return cGroup_5; }

		//":"
		public Keyword getColonKeyword_5_0() { return cColonKeyword_5_0; }

		//addresses=ConstructorAddressParameters
		public Assignment getAddressesAssignment_5_1() { return cAddressesAssignment_5_1; }

		//ConstructorAddressParameters
		public RuleCall getAddressesConstructorAddressParametersParserRuleCall_5_1_0() { return cAddressesConstructorAddressParametersParserRuleCall_5_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//(members+=Member ";")*
		public Group getGroup_7() { return cGroup_7; }

		//members+=Member
		public Assignment getMembersAssignment_7_0() { return cMembersAssignment_7_0; }

		//Member
		public RuleCall getMembersMemberParserRuleCall_7_0_0() { return cMembersMemberParserRuleCall_7_0_0; }

		//";"
		public Keyword getSemicolonKeyword_7_1() { return cSemicolonKeyword_7_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class ConstructorAddressParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstructorAddressParameters");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNamedAddressesParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAddressTupleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ConstructorAddressParameters:
		//	NamedAddresses | AddressTuple;
		public ParserRule getRule() { return rule; }

		//NamedAddresses | AddressTuple
		public Alternatives getAlternatives() { return cAlternatives; }

		//NamedAddresses
		public RuleCall getNamedAddressesParserRuleCall_0() { return cNamedAddressesParserRuleCall_0; }

		//AddressTuple
		public RuleCall getAddressTupleParserRuleCall_1() { return cAddressTupleParserRuleCall_1; }
	}

	public class NamedAddressesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NamedAddresses");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAddressNamesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAddressNamesIDTerminalRuleCall_1_0 = (RuleCall)cAddressNamesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cCommercialAtKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cAddressNamesAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cAddressNamesIDTerminalRuleCall_2_2_0 = (RuleCall)cAddressNamesAssignment_2_2.eContents().get(0);
		
		//NamedAddresses:
		//	"@" addressNames+=ID ("," "@" addressNames+=ID)*;
		public ParserRule getRule() { return rule; }

		//"@" addressNames+=ID ("," "@" addressNames+=ID)*
		public Group getGroup() { return cGroup; }

		//"@"
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }

		//addressNames+=ID
		public Assignment getAddressNamesAssignment_1() { return cAddressNamesAssignment_1; }

		//ID
		public RuleCall getAddressNamesIDTerminalRuleCall_1_0() { return cAddressNamesIDTerminalRuleCall_1_0; }

		//("," "@" addressNames+=ID)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//"@"
		public Keyword getCommercialAtKeyword_2_1() { return cCommercialAtKeyword_2_1; }

		//addressNames+=ID
		public Assignment getAddressNamesAssignment_2_2() { return cAddressNamesAssignment_2_2; }

		//ID
		public RuleCall getAddressNamesIDTerminalRuleCall_2_2_0() { return cAddressNamesIDTerminalRuleCall_2_2_0; }
	}

	public class AddressTupleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AddressTuple");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsIDTerminalRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cElementsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cElementsIDTerminalRuleCall_3_1_0 = (RuleCall)cElementsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AddressTuple:
		//	"@" "(" elements+=ID ("," elements+=ID)* ")";
		public ParserRule getRule() { return rule; }

		//"@" "(" elements+=ID ("," elements+=ID)* ")"
		public Group getGroup() { return cGroup; }

		//"@"
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//elements+=ID
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }

		//ID
		public RuleCall getElementsIDTerminalRuleCall_2_0() { return cElementsIDTerminalRuleCall_2_0; }

		//("," elements+=ID)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//elements+=ID
		public Assignment getElementsAssignment_3_1() { return cElementsAssignment_3_1; }

		//ID
		public RuleCall getElementsIDTerminalRuleCall_3_1_0() { return cElementsIDTerminalRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class MemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Member");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLinkBindingParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpansionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInstantiationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cGroupingParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Member:
		//	LinkBinding | Expansion | Instantiation | Grouping;
		public ParserRule getRule() { return rule; }

		//LinkBinding | Expansion | Instantiation | Grouping
		public Alternatives getAlternatives() { return cAlternatives; }

		//LinkBinding
		public RuleCall getLinkBindingParserRuleCall_0() { return cLinkBindingParserRuleCall_0; }

		//Expansion
		public RuleCall getExpansionParserRuleCall_1() { return cExpansionParserRuleCall_1; }

		//Instantiation
		public RuleCall getInstantiationParserRuleCall_2() { return cInstantiationParserRuleCall_2; }

		//Grouping
		public RuleCall getGroupingParserRuleCall_3() { return cGroupingParserRuleCall_3; }
	}

	public class LinkBindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LinkBinding");
		private final RuleCall cTosNetLinkBindingParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// Link binding
		//LinkBinding:
		//	TosNetLinkBinding;
		public ParserRule getRule() { return rule; }

		//TosNetLinkBinding
		public RuleCall getTosNetLinkBindingParserRuleCall() { return cTosNetLinkBindingParserRuleCall; }
	}

	public class TosNetLinkBindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TosNetLinkBinding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTOSNETKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPropertiesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPropertiesLinkPropertyParserRuleCall_2_0 = (RuleCall)cPropertiesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPropertiesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPropertiesLinkPropertyParserRuleCall_3_1_0 = (RuleCall)cPropertiesAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TosNetLinkBinding:
		//	"TOSNET" "(" properties+=LinkProperty ("," properties+=LinkProperty)* ")";
		public ParserRule getRule() { return rule; }

		//"TOSNET" "(" properties+=LinkProperty ("," properties+=LinkProperty)* ")"
		public Group getGroup() { return cGroup; }

		//"TOSNET"
		public Keyword getTOSNETKeyword_0() { return cTOSNETKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//properties+=LinkProperty
		public Assignment getPropertiesAssignment_2() { return cPropertiesAssignment_2; }

		//LinkProperty
		public RuleCall getPropertiesLinkPropertyParserRuleCall_2_0() { return cPropertiesLinkPropertyParserRuleCall_2_0; }

		//("," properties+=LinkProperty)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//properties+=LinkProperty
		public Assignment getPropertiesAssignment_3_1() { return cPropertiesAssignment_3_1; }

		//LinkProperty
		public RuleCall getPropertiesLinkPropertyParserRuleCall_3_1_0() { return cPropertiesLinkPropertyParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class LinkPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LinkProperty");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cCTRLKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cCtrlNameAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cCtrlNameIDTerminalRuleCall_0_2_0 = (RuleCall)cCtrlNameAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cBASEKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cBaseValueAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cBaseValueINTTerminalRuleCall_1_2_0 = (RuleCall)cBaseValueAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cCOMMKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cUartNameAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cUartNameIDTerminalRuleCall_2_2_0 = (RuleCall)cUartNameAssignment_2_2.eContents().get(0);
		
		//LinkProperty:
		//	"CTRL" "=" ctrlName=ID | "BASE" "=" baseValue=INT | "COMM" "=" uartName=ID;
		public ParserRule getRule() { return rule; }

		//"CTRL" "=" ctrlName=ID | "BASE" "=" baseValue=INT | "COMM" "=" uartName=ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//"CTRL" "=" ctrlName=ID
		public Group getGroup_0() { return cGroup_0; }

		//"CTRL"
		public Keyword getCTRLKeyword_0_0() { return cCTRLKeyword_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }

		//ctrlName=ID
		public Assignment getCtrlNameAssignment_0_2() { return cCtrlNameAssignment_0_2; }

		//ID
		public RuleCall getCtrlNameIDTerminalRuleCall_0_2_0() { return cCtrlNameIDTerminalRuleCall_0_2_0; }

		//"BASE" "=" baseValue=INT
		public Group getGroup_1() { return cGroup_1; }

		//"BASE"
		public Keyword getBASEKeyword_1_0() { return cBASEKeyword_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }

		//baseValue=INT
		public Assignment getBaseValueAssignment_1_2() { return cBaseValueAssignment_1_2; }

		//INT
		public RuleCall getBaseValueINTTerminalRuleCall_1_2_0() { return cBaseValueINTTerminalRuleCall_1_2_0; }

		//"COMM" "=" uartName=ID
		public Group getGroup_2() { return cGroup_2; }

		//"COMM"
		public Keyword getCOMMKeyword_2_0() { return cCOMMKeyword_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_1() { return cEqualsSignKeyword_2_1; }

		//uartName=ID
		public Assignment getUartNameAssignment_2_2() { return cUartNameAssignment_2_2; }

		//ID
		public RuleCall getUartNameIDTerminalRuleCall_2_2_0() { return cUartNameIDTerminalRuleCall_2_2_0; }
	}

	public class ExpansionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expansion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleExpansionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAddressExpansionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Expansion (application of a constructor)
		//Expansion:
		//	SimpleExpansion | AddressExpansion;
		public ParserRule getRule() { return rule; }

		//SimpleExpansion | AddressExpansion
		public Alternatives getAlternatives() { return cAlternatives; }

		//SimpleExpansion
		public RuleCall getSimpleExpansionParserRuleCall_0() { return cSimpleExpansionParserRuleCall_0; }

		//AddressExpansion
		public RuleCall getAddressExpansionParserRuleCall_1() { return cAddressExpansionParserRuleCall_1; }
	}

	public class SimpleExpansionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleExpansion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConstructorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cConstructorConstructorCrossReference_2_0 = (CrossReference)cConstructorAssignment_2.eContents().get(0);
		private final RuleCall cConstructorConstructorIDTerminalRuleCall_2_0_1 = (RuleCall)cConstructorConstructorCrossReference_2_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cArgumentsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cArgumentsArgumentParserRuleCall_4_0_0 = (RuleCall)cArgumentsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cArgumentsArgumentParserRuleCall_4_1_1_0 = (RuleCall)cArgumentsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cBindingsAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cBindingsAddressBindingParserRuleCall_6_0_0 = (RuleCall)cBindingsAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cCommaKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cBindingsAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cBindingsAddressBindingParserRuleCall_6_1_1_0 = (RuleCall)cBindingsAssignment_6_1_1.eContents().get(0);
		
		//SimpleExpansion:
		//	name=ID ":" constructor=[Constructor] "(" (arguments+=Argument ("," arguments+=Argument)*)? ")"
		//	(bindings+=AddressBinding ("," bindings+=AddressBinding)*)?;
		public ParserRule getRule() { return rule; }

		//name=ID ":" constructor=[Constructor] "(" (arguments+=Argument ("," arguments+=Argument)*)? ")"
		//(bindings+=AddressBinding ("," bindings+=AddressBinding)*)?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//constructor=[Constructor]
		public Assignment getConstructorAssignment_2() { return cConstructorAssignment_2; }

		//[Constructor]
		public CrossReference getConstructorConstructorCrossReference_2_0() { return cConstructorConstructorCrossReference_2_0; }

		//ID
		public RuleCall getConstructorConstructorIDTerminalRuleCall_2_0_1() { return cConstructorConstructorIDTerminalRuleCall_2_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//(arguments+=Argument ("," arguments+=Argument)*)?
		public Group getGroup_4() { return cGroup_4; }

		//arguments+=Argument
		public Assignment getArgumentsAssignment_4_0() { return cArgumentsAssignment_4_0; }

		//Argument
		public RuleCall getArgumentsArgumentParserRuleCall_4_0_0() { return cArgumentsArgumentParserRuleCall_4_0_0; }

		//("," arguments+=Argument)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//arguments+=Argument
		public Assignment getArgumentsAssignment_4_1_1() { return cArgumentsAssignment_4_1_1; }

		//Argument
		public RuleCall getArgumentsArgumentParserRuleCall_4_1_1_0() { return cArgumentsArgumentParserRuleCall_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//(bindings+=AddressBinding ("," bindings+=AddressBinding)*)?
		public Group getGroup_6() { return cGroup_6; }

		//bindings+=AddressBinding
		public Assignment getBindingsAssignment_6_0() { return cBindingsAssignment_6_0; }

		//AddressBinding
		public RuleCall getBindingsAddressBindingParserRuleCall_6_0_0() { return cBindingsAddressBindingParserRuleCall_6_0_0; }

		//("," bindings+=AddressBinding)*
		public Group getGroup_6_1() { return cGroup_6_1; }

		//","
		public Keyword getCommaKeyword_6_1_0() { return cCommaKeyword_6_1_0; }

		//bindings+=AddressBinding
		public Assignment getBindingsAssignment_6_1_1() { return cBindingsAssignment_6_1_1; }

		//AddressBinding
		public RuleCall getBindingsAddressBindingParserRuleCall_6_1_1_0() { return cBindingsAddressBindingParserRuleCall_6_1_1_0; }
	}

	public class AddressExpansionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AddressExpansion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConstructorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cConstructorConstructorCrossReference_3_0 = (CrossReference)cConstructorAssignment_3.eContents().get(0);
		private final RuleCall cConstructorConstructorIDTerminalRuleCall_3_0_1 = (RuleCall)cConstructorConstructorCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cArgumentsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cArgumentsArgumentParserRuleCall_5_0_0 = (RuleCall)cArgumentsAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cArgumentsArgumentParserRuleCall_5_1_1_0 = (RuleCall)cArgumentsAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//AddressExpansion:
		//	"@" name=ID ":" constructor=[Constructor] "(" (arguments+=Argument ("," arguments+=Argument)*)? ")";
		public ParserRule getRule() { return rule; }

		//"@" name=ID ":" constructor=[Constructor] "(" (arguments+=Argument ("," arguments+=Argument)*)? ")"
		public Group getGroup() { return cGroup; }

		//"@"
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//constructor=[Constructor]
		public Assignment getConstructorAssignment_3() { return cConstructorAssignment_3; }

		//[Constructor]
		public CrossReference getConstructorConstructorCrossReference_3_0() { return cConstructorConstructorCrossReference_3_0; }

		//ID
		public RuleCall getConstructorConstructorIDTerminalRuleCall_3_0_1() { return cConstructorConstructorIDTerminalRuleCall_3_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//(arguments+=Argument ("," arguments+=Argument)*)?
		public Group getGroup_5() { return cGroup_5; }

		//arguments+=Argument
		public Assignment getArgumentsAssignment_5_0() { return cArgumentsAssignment_5_0; }

		//Argument
		public RuleCall getArgumentsArgumentParserRuleCall_5_0_0() { return cArgumentsArgumentParserRuleCall_5_0_0; }

		//("," arguments+=Argument)*
		public Group getGroup_5_1() { return cGroup_5_1; }

		//","
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }

		//arguments+=Argument
		public Assignment getArgumentsAssignment_5_1_1() { return cArgumentsAssignment_5_1_1; }

		//Argument
		public RuleCall getArgumentsArgumentParserRuleCall_5_1_1_0() { return cArgumentsArgumentParserRuleCall_5_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class ArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Argument");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cSimpleAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cSimpleIDTerminalRuleCall_0_0 = (RuleCall)cSimpleAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cLhsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cLhsIDTerminalRuleCall_1_0_0 = (RuleCall)cLhsAssignment_1_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRhsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRhsArgumentParserRuleCall_1_2_0 = (RuleCall)cRhsAssignment_1_2.eContents().get(0);
		private final Assignment cTextAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cTextSTRINGTerminalRuleCall_2_0 = (RuleCall)cTextAssignment_2.eContents().get(0);
		
		//Argument:
		//	simple=ID | lhs=ID "+" rhs=Argument | text=STRING;
		public ParserRule getRule() { return rule; }

		//simple=ID | lhs=ID "+" rhs=Argument | text=STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//simple=ID
		public Assignment getSimpleAssignment_0() { return cSimpleAssignment_0; }

		//ID
		public RuleCall getSimpleIDTerminalRuleCall_0_0() { return cSimpleIDTerminalRuleCall_0_0; }

		//lhs=ID "+" rhs=Argument
		public Group getGroup_1() { return cGroup_1; }

		//lhs=ID
		public Assignment getLhsAssignment_1_0() { return cLhsAssignment_1_0; }

		//ID
		public RuleCall getLhsIDTerminalRuleCall_1_0_0() { return cLhsIDTerminalRuleCall_1_0_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_1() { return cPlusSignKeyword_1_1; }

		//rhs=Argument
		public Assignment getRhsAssignment_1_2() { return cRhsAssignment_1_2; }

		//Argument
		public RuleCall getRhsArgumentParserRuleCall_1_2_0() { return cRhsArgumentParserRuleCall_1_2_0; }

		//text=STRING
		public Assignment getTextAssignment_2() { return cTextAssignment_2; }

		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_2_0() { return cTextSTRINGTerminalRuleCall_2_0; }
	}

	public class AddressBindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AddressBinding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAddressesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAddressesHEX_NUMTerminalRuleCall_3_0 = (RuleCall)cAddressesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAddressesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAddressesHEX_NUMTerminalRuleCall_4_1_0 = (RuleCall)cAddressesAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//AddressBinding:
		//	"@" (name=ID "=")? "(" addresses+=HEX_NUM ("," addresses+=HEX_NUM)* ")";
		public ParserRule getRule() { return rule; }

		//"@" (name=ID "=")? "(" addresses+=HEX_NUM ("," addresses+=HEX_NUM)* ")"
		public Group getGroup() { return cGroup; }

		//"@"
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }

		//(name=ID "=")?
		public Group getGroup_1() { return cGroup_1; }

		//name=ID
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//addresses+=HEX_NUM
		public Assignment getAddressesAssignment_3() { return cAddressesAssignment_3; }

		//HEX_NUM
		public RuleCall getAddressesHEX_NUMTerminalRuleCall_3_0() { return cAddressesHEX_NUMTerminalRuleCall_3_0; }

		//("," addresses+=HEX_NUM)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//addresses+=HEX_NUM
		public Assignment getAddressesAssignment_4_1() { return cAddressesAssignment_4_1; }

		//HEX_NUM
		public RuleCall getAddressesHEX_NUMTerminalRuleCall_4_1_0() { return cAddressesHEX_NUMTerminalRuleCall_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class InstantiationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Instantiation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAddressAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAddressAddressSpecParserRuleCall_1_0 = (RuleCall)cAddressAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cKindAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cKindKindParserRuleCall_3_0 = (RuleCall)cKindAssignment_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cPropertiesAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cPropertiesInstantiationPropertyParserRuleCall_5_0_0 = (RuleCall)cPropertiesAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cPropertiesAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cPropertiesInstantiationPropertyParserRuleCall_5_1_1_0 = (RuleCall)cPropertiesAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//// Instantiation of proxy
		//Instantiation:
		//	"@" address=AddressSpec ":" kind=Kind "(" (properties+=InstantiationProperty (","
		//	properties+=InstantiationProperty)*)? ")";
		public ParserRule getRule() { return rule; }

		//"@" address=AddressSpec ":" kind=Kind "(" (properties+=InstantiationProperty ("," properties+=InstantiationProperty)*)?
		//")"
		public Group getGroup() { return cGroup; }

		//"@"
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }

		//address=AddressSpec
		public Assignment getAddressAssignment_1() { return cAddressAssignment_1; }

		//AddressSpec
		public RuleCall getAddressAddressSpecParserRuleCall_1_0() { return cAddressAddressSpecParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//kind=Kind
		public Assignment getKindAssignment_3() { return cKindAssignment_3; }

		//Kind
		public RuleCall getKindKindParserRuleCall_3_0() { return cKindKindParserRuleCall_3_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//(properties+=InstantiationProperty ("," properties+=InstantiationProperty)*)?
		public Group getGroup_5() { return cGroup_5; }

		//properties+=InstantiationProperty
		public Assignment getPropertiesAssignment_5_0() { return cPropertiesAssignment_5_0; }

		//InstantiationProperty
		public RuleCall getPropertiesInstantiationPropertyParserRuleCall_5_0_0() { return cPropertiesInstantiationPropertyParserRuleCall_5_0_0; }

		//("," properties+=InstantiationProperty)*
		public Group getGroup_5_1() { return cGroup_5_1; }

		//","
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }

		//properties+=InstantiationProperty
		public Assignment getPropertiesAssignment_5_1_1() { return cPropertiesAssignment_5_1_1; }

		//InstantiationProperty
		public RuleCall getPropertiesInstantiationPropertyParserRuleCall_5_1_1_0() { return cPropertiesInstantiationPropertyParserRuleCall_5_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class AddressSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AddressSpec");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDirectAddressSpecParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNamedAddressSpecParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AddressSpec:
		//	DirectAddressSpec | NamedAddressSpec;
		public ParserRule getRule() { return rule; }

		//DirectAddressSpec | NamedAddressSpec
		public Alternatives getAlternatives() { return cAlternatives; }

		//DirectAddressSpec
		public RuleCall getDirectAddressSpecParserRuleCall_0() { return cDirectAddressSpecParserRuleCall_0; }

		//NamedAddressSpec
		public RuleCall getNamedAddressSpecParserRuleCall_1() { return cNamedAddressSpecParserRuleCall_1; }
	}

	public class DirectAddressSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DirectAddressSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAddressAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAddressHEX_NUMTerminalRuleCall_2_0 = (RuleCall)cAddressAssignment_2.eContents().get(0);
		
		//DirectAddressSpec:
		//	name=ID "=" address=HEX_NUM;
		public ParserRule getRule() { return rule; }

		//name=ID "=" address=HEX_NUM
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//address=HEX_NUM
		public Assignment getAddressAssignment_2() { return cAddressAssignment_2; }

		//HEX_NUM
		public RuleCall getAddressHEX_NUMTerminalRuleCall_2_0() { return cAddressHEX_NUMTerminalRuleCall_2_0; }
	}

	public class NamedAddressSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NamedAddressSpec");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//NamedAddressSpec:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class KindElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Kind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cREADKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cWRITEKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Kind:
		//	"READ" | "WRITE";
		public ParserRule getRule() { return rule; }

		//"READ" | "WRITE"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"READ"
		public Keyword getREADKeyword_0() { return cREADKeyword_0; }

		//"WRITE"
		public Keyword getWRITEKeyword_1() { return cWRITEKeyword_1; }
	}

	public class InstantiationPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InstantiationProperty");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIDPropertyAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cIDKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cIdAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cIdArgumentParserRuleCall_0_3_0 = (RuleCall)cIdAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cCRCPropertyAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cCRCKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cPublishPropertyAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cPUBLISHKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cModeAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cModeINTTerminalRuleCall_2_3_0 = (RuleCall)cModeAssignment_2_3.eContents().get(0);
		private final Keyword cCommaKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Assignment cRateAssignment_2_5 = (Assignment)cGroup_2.eContents().get(5);
		private final RuleCall cRateINTTerminalRuleCall_2_5_0 = (RuleCall)cRateAssignment_2_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_6 = (Keyword)cGroup_2.eContents().get(6);
		
		//InstantiationProperty:
		//	{IDProperty} "ID" "=" id=Argument | {CRCProperty} "CRC" | {PublishProperty} "PUBLISH" "(" mode=INT "," rate=INT ")";
		public ParserRule getRule() { return rule; }

		//{IDProperty} "ID" "=" id=Argument | {CRCProperty} "CRC" | {PublishProperty} "PUBLISH" "(" mode=INT "," rate=INT ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{IDProperty} "ID" "=" id=Argument
		public Group getGroup_0() { return cGroup_0; }

		//{IDProperty}
		public Action getIDPropertyAction_0_0() { return cIDPropertyAction_0_0; }

		//"ID"
		public Keyword getIDKeyword_0_1() { return cIDKeyword_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_0_2() { return cEqualsSignKeyword_0_2; }

		//id=Argument
		public Assignment getIdAssignment_0_3() { return cIdAssignment_0_3; }

		//Argument
		public RuleCall getIdArgumentParserRuleCall_0_3_0() { return cIdArgumentParserRuleCall_0_3_0; }

		//{CRCProperty} "CRC"
		public Group getGroup_1() { return cGroup_1; }

		//{CRCProperty}
		public Action getCRCPropertyAction_1_0() { return cCRCPropertyAction_1_0; }

		//"CRC"
		public Keyword getCRCKeyword_1_1() { return cCRCKeyword_1_1; }

		//{PublishProperty} "PUBLISH" "(" mode=INT "," rate=INT ")"
		public Group getGroup_2() { return cGroup_2; }

		//{PublishProperty}
		public Action getPublishPropertyAction_2_0() { return cPublishPropertyAction_2_0; }

		//"PUBLISH"
		public Keyword getPUBLISHKeyword_2_1() { return cPUBLISHKeyword_2_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_2() { return cLeftParenthesisKeyword_2_2; }

		//mode=INT
		public Assignment getModeAssignment_2_3() { return cModeAssignment_2_3; }

		//INT
		public RuleCall getModeINTTerminalRuleCall_2_3_0() { return cModeINTTerminalRuleCall_2_3_0; }

		//","
		public Keyword getCommaKeyword_2_4() { return cCommaKeyword_2_4; }

		//rate=INT
		public Assignment getRateAssignment_2_5() { return cRateAssignment_2_5; }

		//INT
		public RuleCall getRateINTTerminalRuleCall_2_5_0() { return cRateINTTerminalRuleCall_2_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_6() { return cRightParenthesisKeyword_2_6; }
	}

	public class GroupingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Grouping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsGroupElementParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cElementsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cElementsGroupElementParserRuleCall_3_1_0 = (RuleCall)cElementsAssignment_3_1.eContents().get(0);
		
		//// Grouping of existing elements (alias)
		//Grouping:
		//	name=ID "=" elements+=GroupElement ("," elements+=GroupElement)*;
		public ParserRule getRule() { return rule; }

		//name=ID "=" elements+=GroupElement ("," elements+=GroupElement)*
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//elements+=GroupElement
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }

		//GroupElement
		public RuleCall getElementsGroupElementParserRuleCall_2_0() { return cElementsGroupElementParserRuleCall_2_0; }

		//("," elements+=GroupElement)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//elements+=GroupElement
		public Assignment getElementsAssignment_3_1() { return cElementsAssignment_3_1; }

		//GroupElement
		public RuleCall getElementsGroupElementParserRuleCall_3_1_0() { return cElementsGroupElementParserRuleCall_3_1_0; }
	}

	public class GroupElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GroupElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPathAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPathPathElementParserRuleCall_0_0 = (RuleCall)cPathAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPathAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPathPathElementParserRuleCall_1_1_0 = (RuleCall)cPathAssignment_1_1.eContents().get(0);
		
		//GroupElement:
		//	path+=PathElement ("." path+=PathElement)*;
		public ParserRule getRule() { return rule; }

		//path+=PathElement ("." path+=PathElement)*
		public Group getGroup() { return cGroup; }

		//path+=PathElement
		public Assignment getPathAssignment_0() { return cPathAssignment_0; }

		//PathElement
		public RuleCall getPathPathElementParserRuleCall_0_0() { return cPathPathElementParserRuleCall_0_0; }

		//("." path+=PathElement)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//path+=PathElement
		public Assignment getPathAssignment_1_1() { return cPathAssignment_1_1; }

		//PathElement
		public RuleCall getPathPathElementParserRuleCall_1_1_0() { return cPathPathElementParserRuleCall_1_1_0; }
	}

	public class PathElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PathElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cSimpleAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cSimpleIDTerminalRuleCall_0_0 = (RuleCall)cSimpleAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cALLKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cTypeAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final CrossReference cTypeConstructorCrossReference_1_2_0 = (CrossReference)cTypeAssignment_1_2.eContents().get(0);
		private final RuleCall cTypeConstructorIDTerminalRuleCall_1_2_0_1 = (RuleCall)cTypeConstructorCrossReference_1_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//PathElement:
		//	simple=ID | "ALL" "(" type=[Constructor] ")";
		public ParserRule getRule() { return rule; }

		//simple=ID | "ALL" "(" type=[Constructor] ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//simple=ID
		public Assignment getSimpleAssignment_0() { return cSimpleAssignment_0; }

		//ID
		public RuleCall getSimpleIDTerminalRuleCall_0_0() { return cSimpleIDTerminalRuleCall_0_0; }

		//"ALL" "(" type=[Constructor] ")"
		public Group getGroup_1() { return cGroup_1; }

		//"ALL"
		public Keyword getALLKeyword_1_0() { return cALLKeyword_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//type=[Constructor]
		public Assignment getTypeAssignment_1_2() { return cTypeAssignment_1_2; }

		//[Constructor]
		public CrossReference getTypeConstructorCrossReference_1_2_0() { return cTypeConstructorCrossReference_1_2_0; }

		//ID
		public RuleCall getTypeConstructorIDTerminalRuleCall_1_2_0_1() { return cTypeConstructorIDTerminalRuleCall_1_2_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}
	
	
	private LinkSpecElements pLinkSpec;
	private ConstructorElements pConstructor;
	private ConstructorAddressParametersElements pConstructorAddressParameters;
	private NamedAddressesElements pNamedAddresses;
	private AddressTupleElements pAddressTuple;
	private MemberElements pMember;
	private LinkBindingElements pLinkBinding;
	private TosNetLinkBindingElements pTosNetLinkBinding;
	private LinkPropertyElements pLinkProperty;
	private ExpansionElements pExpansion;
	private SimpleExpansionElements pSimpleExpansion;
	private AddressExpansionElements pAddressExpansion;
	private ArgumentElements pArgument;
	private AddressBindingElements pAddressBinding;
	private InstantiationElements pInstantiation;
	private AddressSpecElements pAddressSpec;
	private DirectAddressSpecElements pDirectAddressSpec;
	private NamedAddressSpecElements pNamedAddressSpec;
	private KindElements pKind;
	private InstantiationPropertyElements pInstantiationProperty;
	private GroupingElements pGrouping;
	private GroupElementElements pGroupElement;
	private PathElementElements pPathElement;
	private TerminalRule tHEX_NUM;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public ULSWIGGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("dk.sdu.mmmi.embedix.ULSWIG".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//LinkSpec:
	//	"link" (packagename=ID ".")? name=ID ";" constructors+=Constructor*;
	public LinkSpecElements getLinkSpecAccess() {
		return (pLinkSpec != null) ? pLinkSpec : (pLinkSpec = new LinkSpecElements());
	}
	
	public ParserRule getLinkSpecRule() {
		return getLinkSpecAccess().getRule();
	}

	//Constructor:
	//	isPublic?="public"? name=ID "(" (parameters+=ID ("," parameters+=ID)*)? ")" (":"
	//	addresses=ConstructorAddressParameters)? "{" (members+=Member ";")* "}";
	public ConstructorElements getConstructorAccess() {
		return (pConstructor != null) ? pConstructor : (pConstructor = new ConstructorElements());
	}
	
	public ParserRule getConstructorRule() {
		return getConstructorAccess().getRule();
	}

	//ConstructorAddressParameters:
	//	NamedAddresses | AddressTuple;
	public ConstructorAddressParametersElements getConstructorAddressParametersAccess() {
		return (pConstructorAddressParameters != null) ? pConstructorAddressParameters : (pConstructorAddressParameters = new ConstructorAddressParametersElements());
	}
	
	public ParserRule getConstructorAddressParametersRule() {
		return getConstructorAddressParametersAccess().getRule();
	}

	//NamedAddresses:
	//	"@" addressNames+=ID ("," "@" addressNames+=ID)*;
	public NamedAddressesElements getNamedAddressesAccess() {
		return (pNamedAddresses != null) ? pNamedAddresses : (pNamedAddresses = new NamedAddressesElements());
	}
	
	public ParserRule getNamedAddressesRule() {
		return getNamedAddressesAccess().getRule();
	}

	//AddressTuple:
	//	"@" "(" elements+=ID ("," elements+=ID)* ")";
	public AddressTupleElements getAddressTupleAccess() {
		return (pAddressTuple != null) ? pAddressTuple : (pAddressTuple = new AddressTupleElements());
	}
	
	public ParserRule getAddressTupleRule() {
		return getAddressTupleAccess().getRule();
	}

	//Member:
	//	LinkBinding | Expansion | Instantiation | Grouping;
	public MemberElements getMemberAccess() {
		return (pMember != null) ? pMember : (pMember = new MemberElements());
	}
	
	public ParserRule getMemberRule() {
		return getMemberAccess().getRule();
	}

	//// Link binding
	//LinkBinding:
	//	TosNetLinkBinding;
	public LinkBindingElements getLinkBindingAccess() {
		return (pLinkBinding != null) ? pLinkBinding : (pLinkBinding = new LinkBindingElements());
	}
	
	public ParserRule getLinkBindingRule() {
		return getLinkBindingAccess().getRule();
	}

	//TosNetLinkBinding:
	//	"TOSNET" "(" properties+=LinkProperty ("," properties+=LinkProperty)* ")";
	public TosNetLinkBindingElements getTosNetLinkBindingAccess() {
		return (pTosNetLinkBinding != null) ? pTosNetLinkBinding : (pTosNetLinkBinding = new TosNetLinkBindingElements());
	}
	
	public ParserRule getTosNetLinkBindingRule() {
		return getTosNetLinkBindingAccess().getRule();
	}

	//LinkProperty:
	//	"CTRL" "=" ctrlName=ID | "BASE" "=" baseValue=INT | "COMM" "=" uartName=ID;
	public LinkPropertyElements getLinkPropertyAccess() {
		return (pLinkProperty != null) ? pLinkProperty : (pLinkProperty = new LinkPropertyElements());
	}
	
	public ParserRule getLinkPropertyRule() {
		return getLinkPropertyAccess().getRule();
	}

	//// Expansion (application of a constructor)
	//Expansion:
	//	SimpleExpansion | AddressExpansion;
	public ExpansionElements getExpansionAccess() {
		return (pExpansion != null) ? pExpansion : (pExpansion = new ExpansionElements());
	}
	
	public ParserRule getExpansionRule() {
		return getExpansionAccess().getRule();
	}

	//SimpleExpansion:
	//	name=ID ":" constructor=[Constructor] "(" (arguments+=Argument ("," arguments+=Argument)*)? ")"
	//	(bindings+=AddressBinding ("," bindings+=AddressBinding)*)?;
	public SimpleExpansionElements getSimpleExpansionAccess() {
		return (pSimpleExpansion != null) ? pSimpleExpansion : (pSimpleExpansion = new SimpleExpansionElements());
	}
	
	public ParserRule getSimpleExpansionRule() {
		return getSimpleExpansionAccess().getRule();
	}

	//AddressExpansion:
	//	"@" name=ID ":" constructor=[Constructor] "(" (arguments+=Argument ("," arguments+=Argument)*)? ")";
	public AddressExpansionElements getAddressExpansionAccess() {
		return (pAddressExpansion != null) ? pAddressExpansion : (pAddressExpansion = new AddressExpansionElements());
	}
	
	public ParserRule getAddressExpansionRule() {
		return getAddressExpansionAccess().getRule();
	}

	//Argument:
	//	simple=ID | lhs=ID "+" rhs=Argument | text=STRING;
	public ArgumentElements getArgumentAccess() {
		return (pArgument != null) ? pArgument : (pArgument = new ArgumentElements());
	}
	
	public ParserRule getArgumentRule() {
		return getArgumentAccess().getRule();
	}

	//AddressBinding:
	//	"@" (name=ID "=")? "(" addresses+=HEX_NUM ("," addresses+=HEX_NUM)* ")";
	public AddressBindingElements getAddressBindingAccess() {
		return (pAddressBinding != null) ? pAddressBinding : (pAddressBinding = new AddressBindingElements());
	}
	
	public ParserRule getAddressBindingRule() {
		return getAddressBindingAccess().getRule();
	}

	//// Instantiation of proxy
	//Instantiation:
	//	"@" address=AddressSpec ":" kind=Kind "(" (properties+=InstantiationProperty (","
	//	properties+=InstantiationProperty)*)? ")";
	public InstantiationElements getInstantiationAccess() {
		return (pInstantiation != null) ? pInstantiation : (pInstantiation = new InstantiationElements());
	}
	
	public ParserRule getInstantiationRule() {
		return getInstantiationAccess().getRule();
	}

	//AddressSpec:
	//	DirectAddressSpec | NamedAddressSpec;
	public AddressSpecElements getAddressSpecAccess() {
		return (pAddressSpec != null) ? pAddressSpec : (pAddressSpec = new AddressSpecElements());
	}
	
	public ParserRule getAddressSpecRule() {
		return getAddressSpecAccess().getRule();
	}

	//DirectAddressSpec:
	//	name=ID "=" address=HEX_NUM;
	public DirectAddressSpecElements getDirectAddressSpecAccess() {
		return (pDirectAddressSpec != null) ? pDirectAddressSpec : (pDirectAddressSpec = new DirectAddressSpecElements());
	}
	
	public ParserRule getDirectAddressSpecRule() {
		return getDirectAddressSpecAccess().getRule();
	}

	//NamedAddressSpec:
	//	name=ID;
	public NamedAddressSpecElements getNamedAddressSpecAccess() {
		return (pNamedAddressSpec != null) ? pNamedAddressSpec : (pNamedAddressSpec = new NamedAddressSpecElements());
	}
	
	public ParserRule getNamedAddressSpecRule() {
		return getNamedAddressSpecAccess().getRule();
	}

	//Kind:
	//	"READ" | "WRITE";
	public KindElements getKindAccess() {
		return (pKind != null) ? pKind : (pKind = new KindElements());
	}
	
	public ParserRule getKindRule() {
		return getKindAccess().getRule();
	}

	//InstantiationProperty:
	//	{IDProperty} "ID" "=" id=Argument | {CRCProperty} "CRC" | {PublishProperty} "PUBLISH" "(" mode=INT "," rate=INT ")";
	public InstantiationPropertyElements getInstantiationPropertyAccess() {
		return (pInstantiationProperty != null) ? pInstantiationProperty : (pInstantiationProperty = new InstantiationPropertyElements());
	}
	
	public ParserRule getInstantiationPropertyRule() {
		return getInstantiationPropertyAccess().getRule();
	}

	//// Grouping of existing elements (alias)
	//Grouping:
	//	name=ID "=" elements+=GroupElement ("," elements+=GroupElement)*;
	public GroupingElements getGroupingAccess() {
		return (pGrouping != null) ? pGrouping : (pGrouping = new GroupingElements());
	}
	
	public ParserRule getGroupingRule() {
		return getGroupingAccess().getRule();
	}

	//GroupElement:
	//	path+=PathElement ("." path+=PathElement)*;
	public GroupElementElements getGroupElementAccess() {
		return (pGroupElement != null) ? pGroupElement : (pGroupElement = new GroupElementElements());
	}
	
	public ParserRule getGroupElementRule() {
		return getGroupElementAccess().getRule();
	}

	//PathElement:
	//	simple=ID | "ALL" "(" type=[Constructor] ")";
	public PathElementElements getPathElementAccess() {
		return (pPathElement != null) ? pPathElement : (pPathElement = new PathElementElements());
	}
	
	public ParserRule getPathElementRule() {
		return getPathElementAccess().getRule();
	}

	//// Hexadecimal numbers (lexer rule)
	//terminal HEX_NUM:
	//	"0" "x" ("0".."9" | "a".."f" | "A".."F")+;
	public TerminalRule getHEX_NUMRule() {
		return (tHEX_NUM != null) ? tHEX_NUM : (tHEX_NUM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HEX_NUM"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
